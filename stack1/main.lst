     1                                  %include "stud_io.inc"
     1                              <1> ;; File stud_io.inc for Linux O.S.
     2                              <1> ;; Copyright (c) Andrey Vikt. Stolyarov, 2009.
     3                              <1> ;; I, the author, hereby grant everyone the right to use this
     4                              <1> ;; file for any purpose, in any manner, in it's original or
     5                              <1> ;; modified form, provided that any modified versions are
     6                              <1> ;; clearly marked as such.
     7                              <1> 
     8                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     9                              <1> ;; system dependend part
    10                              <1> 
    11                              <1> ; generic 3-param syscall
    12                              <1> %macro _syscall_3 4
    13                              <1> 	push edx
    14                              <1> 	push ecx
    15                              <1> 	push ebx ; it is senseless to save eax as it holds the return
    16                              <1> 	push %1
    17                              <1> 	push %2
    18                              <1> 	push %3
    19                              <1> 	push %4
    20                              <1> 	pop edx
    21                              <1> 	pop ecx
    22                              <1> 	pop ebx
    23                              <1> 	pop eax
    24                              <1> 	int 0x80
    25                              <1> 	pop ebx
    26                              <1> 	pop ecx
    27                              <1> 	pop edx
    28                              <1> %endmacro
    29                              <1> 
    30                              <1> ; syscall_exit is the only syscall we use that has 1 parameter
    31                              <1> %macro _syscall_exit 1
    32                              <1> 	mov ebx, %1	; exit code
    33                              <1> 	mov eax, 1	; 1 = sys_exit
    34                              <1> 	int 0x80
    35                              <1> %endmacro
    36                              <1> 
    37                              <1> ;; system dependent part ends here
    38                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    39                              <1> 
    40                              <1> ; %1: descriptor   %2: buffer addr   %3: buffer length
    41                              <1> ; output: eax: read bytes
    42                              <1> %macro _syscall_read 3
    43                              <1> 	_syscall_3 3,%1,%2,%3
    44                              <1> %endmacro
    45                              <1> 
    46                              <1> ; %1: descriptor   %2: buffer addr   %3: buffer length
    47                              <1> ; output: eax: written bytes
    48                              <1> %macro _syscall_write 3
    49                              <1> 	_syscall_3 4,%1,%2,%3
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    53                              <1> %macro 	PRINT 1
    54                              <1> 	pusha
    55                              <1> 	pushf
    56                              <1> 	jmp %%astr
    57                              <1> %%str	db	%1, 0
    58                              <1> %%strln	equ	$-%%str
    59                              <1> %%astr:	_syscall_write 1, %%str, %%strln
    60                              <1> 	popf
    61                              <1> 	popa
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    65                              <1> %macro	PUTCHAR 1
    66                              <1> 	pusha
    67                              <1> 	pushf
    68                              <1> %ifstr %1
    69                              <1> 	mov	al, %1
    70                              <1> %elifnum %1
    71                              <1> 	mov	al, %1
    72                              <1> %elifidni %1,al
    73                              <1> 	nop
    74                              <1> %elifidni %1,ah
    75                              <1> 	mov	al, ah
    76                              <1> %elifidni %1,bl
    77                              <1> 	mov	al, bl
    78                              <1> %elifidni %1,bh
    79                              <1> 	mov	al, bh
    80                              <1> %elifidni %1,cl
    81                              <1> 	mov	al, cl
    82                              <1> %elifidni %1,ch
    83                              <1> 	mov	al, ch
    84                              <1> %elifidni %1,dl
    85                              <1> 	mov	al, dl
    86                              <1> %elifidni %1,dh
    87                              <1> 	mov	al, dh
    88                              <1> %else
    89                              <1> 	mov	al, %1  ; let's hope it is a memory location such as [var]
    90                              <1> %endif
    91                              <1> 	sub	esp, 2  ; reserve memory for buffer
    92                              <1> 	mov	edi, esp
    93                              <1> 	mov	[edi], al
    94                              <1> 	_syscall_write 1, edi, 1
    95                              <1> 	add	esp, 2
    96                              <1> 	popf
    97                              <1> 	popa
    98                              <1> %endmacro
    99                              <1> 
   100                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   101                              <1> %macro	GETCHAR 0
   102                              <1> 	pushf
   103                              <1> 	push	edi
   104                              <1> 	sub	esp, 2
   105                              <1> 	mov	edi, esp
   106                              <1> 	_syscall_read 0, edi, 1
   107                              <1> 	cmp	eax, 1
   108                              <1> 	jne	%%eof_reached
   109                              <1> 	xor	eax,eax
   110                              <1> 	mov	al, [edi]
   111                              <1> 	jmp	%%gcquit
   112                              <1> %%eof_reached:
   113                              <1> 	xor	eax, eax
   114                              <1> 	not	eax 		; eax := -1
   115                              <1> %%gcquit:
   116                              <1> 	add	esp, 2
   117                              <1> 	pop	edi
   118                              <1> 	popf
   119                              <1> %endmacro
   120                              <1> 
   121                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   122                              <1> %macro FINISH 0-1 0
   123                              <1> 	_syscall_exit %1
   124                              <1> %endmacro
   125                              <1> 
     2                                  global _start
     3                                  
     4                                  ; Reverse string and print it
     5                                  
     6                                  section .data
     7 00000000 48656C6C6F20537472-     src db "Hello String!"
     7 00000009 696E6721           
     8                                  
     9                                  section .text
    10 00000000 31DB                    _start: xor ebx, ebx
    11 00000002 31C9                    	xor ecx, ecx
    12 00000004 BE[00000000]            	mov esi, src
    13                                  
    14 00000009 8A1C0E                  lp:	mov bl, [esi+ecx]
    15 0000000C 80FB00                  	cmp bl, 0
    16 0000000F 7404                    	je lpquit
    17 00000011 53                      	push ebx
    18 00000012 41                      	inc ecx
    19 00000013 EBF4                    	jmp lp
    20                                  
    21 00000015 E332                    lpquit:	jecxz done
    22 00000017 89F7                    	mov edi, esi
    23                                  
    24 00000019 5B                      lp2:	pop ebx
    25 0000001A 881F                    	mov [edi], bl
    26 0000001C 47                      	inc edi
    27 0000001D E2FA                    	loop lp2
    28                                  
    29 0000001F B90D000000              	mov ecx, 13
    30 00000024 AC                      prnt:	lodsb
    31                                  	PUTCHAR al
    31 00000025 60                  <1>  pusha
    31 00000026 9C                  <1>  pushf
    31                              <1> %ifstr %1
    31                              <1>  mov al, %1
    31                              <1> %elifnum %1
    31                              <1>  mov al, %1
    31                              <1> %elifidni %1,al
    31 00000027 90                  <1>  nop
    31                              <1> %elifidni %1,ah
    31                              <1>  mov al, ah
    31                              <1> %elifidni %1,bl
    31                              <1>  mov al, bl
    31                              <1> %elifidni %1,bh
    31                              <1>  mov al, bh
    31                              <1> %elifidni %1,cl
    31                              <1>  mov al, cl
    31                              <1> %elifidni %1,ch
    31                              <1>  mov al, ch
    31                              <1> %elifidni %1,dl
    31                              <1>  mov al, dl
    31                              <1> %elifidni %1,dh
    31                              <1>  mov al, dh
    31                              <1> %else
    31                              <1>  mov al, %1
    31                              <1> %endif
    31 00000028 83EC02              <1>  sub esp, 2
    31 0000002B 89E7                <1>  mov edi, esp
    31 0000002D 8807                <1>  mov [edi], al
    31                              <1>  _syscall_write 1, edi, 1
    31                              <2>  _syscall_3 4,%1,%2,%3
    31 0000002F 52                  <3>  push edx
    31 00000030 51                  <3>  push ecx
    31 00000031 53                  <3>  push ebx
    31 00000032 6A04                <3>  push %1
    31 00000034 6A01                <3>  push %2
    31 00000036 57                  <3>  push %3
    31 00000037 6A01                <3>  push %4
    31 00000039 5A                  <3>  pop edx
    31 0000003A 59                  <3>  pop ecx
    31 0000003B 5B                  <3>  pop ebx
    31 0000003C 58                  <3>  pop eax
    31 0000003D CD80                <3>  int 0x80
    31 0000003F 5B                  <3>  pop ebx
    31 00000040 59                  <3>  pop ecx
    31 00000041 5A                  <3>  pop edx
    31 00000042 83C402              <1>  add esp, 2
    31 00000045 9D                  <1>  popf
    31 00000046 61                  <1>  popa
    32 00000047 E2DB                    	loop prnt
    33                                  
    34                                  done:	FINISH
    34                              <1> done: 
    34                              <1>  _syscall_exit %1
    34 00000049 BB00000000          <2>  mov ebx, %1
    34 0000004E B801000000          <2>  mov eax, 1
    34 00000053 CD80                <2>  int 0x80
